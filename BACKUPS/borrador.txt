Según las mejores parcaticas la lógica de negocio no debería ir en la capa de datos, y peor aún si se trata en un desencadenador (Trigger), sobre el cual no vamos a tener control de las veces que se ejecute, si este llama a stores 
"Lógica de Negocio incluida en Desencadenadores", también conocido como Triggers, el cual se presenta cuando se utilizan los Triggers para la ejecución de cambios en ciertos datos desencadenadas por inserciones o actualizaciones de otros datos.

Problemas ocasionados 
•	Podrian generar bloqueos los cuales seria difícil de detectar en un futuro.
•	Los Triggers se ejecutan de forma no visible para aplicaciones y no pueden ser rastreados por código de debugging. Por ende, el debugging tiende a ser más complejo 
•	Es difícil seguir la lógica porque puede desencadenarse antes o después que ocurra la inserción o actualización en la base de datos. 
•	Son fáciles de olvidar, en especial cuando no se tienen procedimientos de documentación, por lo que futuros desarrolladores quizás ni siquiera conocerán su existencia. 
•	Tienden a escribirse asumiendo que la inserción es de un sólo registro (cuando se inserta más de un registro pueden existir errores). 
•	El control de 


Soluciones / Alternativas

Entre las alternativas está la implementación de esta lógica de negocio en Procedimientos Almacenados (Stored Procedures) que son más visibles para la aplicación, más fáciles de mantener y encontrar errores. Tanto la primera instrucción de inserción como la desencadenada (incluida originalmente en el Trigger) serán ejecutadas por un Procedimiento (Procedure) invocado desde la aplicación.

Otra alternativa es incluir está lógica en la capa de lógica de negocios y no en la capa de acceso a datos, por ejemplo se escribirá un código que realicé la inserción del primer registro y luego otra instrucción (desde la capa de aplicación) en el segundo registro (originalmente en el Trigger), ambos tendrán un Procedimiento (Procedure) asociado.


